#include <iostream>
#include <memory>
#include <string>

#include <IterativeRobot.h>
#include <LiveWindow/LiveWindow.h>
#include <SmartDashboard/SendableChooser.h>
#include <SmartDashboard/SmartDashboard.h>

#include <TalonSRX.h>
#include <VictorSP.h>
#include <XboxController.h>
#include <Solenoid.h>
#include <DoubleSolenoid.h>
#include <Timer.h>
#include <cmath>

class Robot: public frc::IterativeRobot {
public:

	XboxController gamepad;

	//DropDowns & DriveTrain
	TalonSRX frontLeft{0};
	TalonSRX frontRight{1};
	TalonSRX backLeft{2};
	TalonSRX backRight{3};

	DoubleSolenoid dropDowns{0, 1};

	bool mecanumButton;

	double driveRotate;
	double driveX;
	double driveY;
	double expoCurve;

	void RobotInit() {
		chooser.AddDefault(autoNameDefault, autoNameDefault);
		chooser.AddObject(autoNameCustom, autoNameCustom);
		frc::SmartDashboard::PutData("Auto Modes", &chooser);

		//DropDowns & DriveTrain
		dropDowns.Set(frc::DoubleSolenoid::kOff);

		mecanumButton = false;

		driveRotate = 0.0;
		driveX	 	= 0.0;
		driveY 		= 0.0;
		expoCurve   = 1.0;


	}

	/*
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * GetString line to get the auto name from the text box below the Gyro.
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * if-else structure below with additional strings. If using the
	 * SendableChooser make sure to add them t(yo the chooser code above as well.
	 */
	void AutonomousInit() override {
		autoSelected = chooser.GetSelected();
		// std::string autoSelected = SmartDashboard::GetString("Auto Selector", autoNameDefault);
		std::cout << "Auto selected: " << autoSelected << std::endl;

		if (autoSelected == autoNameCustom) {
			// Custom Auto goes here
		} else {
			// Default Auto goes here
		}
	}

	void AutonomousPeriodic() {
		if (autoSelected == autoNameCustom) {
			// Custom Auto goes here
		} else {
			// Default Auto goes here
		}
	}

	void TeleopInit() {

		while(IsOperatorControl() && IsEnabled){

			//drive();

			arcadeDrive(gamepad.GetRawAxis(0), gamepad.GetRawAxis(1));

			frc::Wait(0.005);

		}

	}

	void TeleopPeriodic() {

	}

	void TestPeriodic() {
		lw->Run();
	}

private:
	frc::LiveWindow* lw = LiveWindow::GetInstance();
	frc::SendableChooser<std::string> chooser;
	const std::string autoNameDefault = "Default";
	const std::string autoNameCustom = "My Auto";
	std::string autoSelected;

	void drive(){

		driveX      = gamepad.GetRawAxis(0);
		driveY      = gamepad.GetRawAxis(1);
		driveRotate = gamepad.GetRawAxis(4);

		mecanumButton = gamepad.GetRawButton(5);

		if(!mecanumButton){

			arcadeDrive(driveX, driveY);
			dropDowns.Set(frc::DoubleSolenoid::kReverse);

		} else if(mecanumButton){

			mecanumDrive(driveX, driveY, driveRotate);
			dropDowns.Set(frc::DoubleSolenoid::kForward);

		}

	}

	void arcadeDrive(double x, double y){


		frontRight.Set(constrain(expo(y + x, expoCurve), -1, 1));
		frontLeft.Set(constrain(expo(y + x, expoCurve), -1, 1));
		backRight.Set(constrain(expo(y - x, expoCurve), -1, 1));
		backLeft.Set(constrain(expo(y - x, expoCurve), -1, 1));

	}

	void mecanumDrive(double x, double y, double z){


		frontRight.Set(constrain(expo(z + y + x, expoCurve), -1, 1));
		frontLeft.Set(constrain(expo(z - y + x, expoCurve), -1, 1));
		backRight.Set(constrain(expo(z + y - x, expoCurve), -1, 1));
		backLeft.Set(constrain(expo(z - y - x, expoCurve), -1, 1));

	}

	double constrain(double originial, double min, double max){

			if(originial < min){

				originial = min;

			}
			if(originial > max){

				originial = max;

			}

			return originial;
		}

	double expo(double x, double a){

	        double y = x;
	        y = a * pow(y, 3) + (1-a)*y;
	        return y;

	    }

};

START_ROBOT_CLASS(Robot)
